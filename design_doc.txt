
Overview:
---------
This application provides functionality to manage person records, including storing, retrieving, and manipulating data using both file I/O and a linked list in C.

Each record includes:
            - id       : Unique identifier
            - name     : Full name (supports spaces)
            - age      : Integer age
            - salary   : Integer salary
            - email    : Email address string

The application supports adding, reading, searching, and deleting records.

Data Format in File:
--------------------
Each record is stored in the file as:
    id:name:age:salary:email

Example:
    1:John Doe:30:50000:john@example.com

Structures:
-----------
1. Person:
    typedef struct {
        int id;
        char name[50];
        int age;
        int salary;
        char email[100];
    } Person;
    
    
    
Structure Node: 
It includes:

    Node::p ie Person data.
    Node::next ie Pointer to the next node in the list.
-------------------------------------------------------

2. Node:
    typedef struct Node {
        Person p;
        struct Node* next;
    } Node;

Functions:
----------

1. Node* add_person(const char* filename, Person p, Node* head)
--------------------------------------------------------------
- Adds a new person record to the linked list and appends it to the file.
- Parameters:
    - filename: The name of the file to write to.
    - p      : Person data to be added.
    - head   : Pointer to the head of the linked list.
- Returns:
    - Updated head pointer.

2. void read_from_file(const char* filename)
--------------------------------------------
- Reads person records line by line from the file and prints them.
- Parameters:
    - filename: The file to read from.
- Output:
    - Prints the person details in formatted form.

3. void read_list(Node* head)
-----------------------------
- Traverses the linked list and prints each person.
- Parameters:
    - head: Pointer to the head of the list.
- Output:
    - Prints person details if list is not empty.

4. Node* load_list(const char* filename)
----------------------------------------
- Reads all records from the file and creates a linked list.
- Parameters:
    - filename: The file containing person records.
- Returns:
    - Head pointer of the new list.

5. int idsize(Node* head)
-------------------------
- Calculates the number of nodes in the linked list.
- Parameters:
    - head: Head pointer of the list.
- Returns:
    - Total number of nodes (int).

6. Person* search(Node* head, int idd)
--------------------------------------
- Searches for a person by ID in the linked list.
- Parameters:
    - head: Head pointer of the list.
    - idd : ID to search for.
- Returns:
    - Pointer to Person if found, NULL otherwise.

7. Node* deletedata(Node* head, const char* filename, int id_to_delete)
------------------------------------------------------------------------
- Deletes a record from both the linked list and the file.
- Parameters:
    - head         : Head of the list.
    - filename     : File where record is stored.
    - id_to_delete : ID of the person to delete.
- Process:
    - Removes the node from the list.
    - Rewrites the entire file excluding the deleted record.
- Returns:
    - Updated head pointer of the list.

--------------------------
